name: Release_Version

on:
  push:
    branches: 
      - main
      - slave

#  pull_request:
#    branches: [ master ]
#    tags:
#      - "v*"

run-name: "${{ github.ref_name }} - ${{ github.event.head_commit.message }}"

jobs:
  check-skip:
    runs-on: ubuntu-22.04
    steps:
      - name: Check commit message
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"[skip ci]"* ]]; then
            echo "Skipping workflow"
            exit 1
          fi
  create_release:
    name: Create release
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: get app version
        run: |
          echo "VER_TAG_NAME=$(cat main.cpp |grep 'const QString APP'|awk -F\" '{print $2;}')-$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT
          echo "APP_NAME=$(cat *.pro |grep 'TARGET ='|awk -F\= '{print $2;}'| tr -d ' ')" >> $GITHUB_OUTPUT
        id: build
      - name: Create release
        if: github.ref == 'refs/heads/main'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.build.outputs.VER_TAG_NAME }}_${{ github.ref }}
          name: Release CI ${{ steps.build.outputs.VER_TAG_NAME }} ${{ github.ref }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build_release:
    name: Build release
    needs: create_release
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-22.04
          - os: macos-latest
          - os: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: get app version
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          echo "VER_TAG_NAME=$(cat main.cpp |grep 'const QString APP'|awk -F\" '{print $2;}')-$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT
          echo "APP_NAME=$(cat *.pro |grep 'TARGET ='|awk -F\= '{print $2;}'| tr -d ' ')" >> $GITHUB_OUTPUT
        id: build
      - name: add qt repo to linux
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update -qq
#         sudo add-apt-repository ppa:beineri/opt-qt-5.15.4-focal -y
      - name: install qt into linux
        if: matrix.config.os == 'ubuntu-22.04'
        run:  sudo apt-get -y install debhelper dput devscripts qt6-base-dev qt6-tools-dev qt6-tools-dev-tools qt6-l10n-tools libgl1-mesa-dev libssl-dev libqt6charts6-dev libqt6serialport6-dev libssl-dev zlib1g-dev libfuse2
      - name: Set up GPG
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          echo "${{ secrets.LAUNCHPAD_GPG_KEY }}" | gpg --batch --import
          echo "${{ secrets.LAUNCHPAD_GPG_KEY_ID }}:6:" | gpg --import-ownertrust
      - name: Setup SSH for Launchpad
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LAUNCHPAD_SSH_KEY }}" > ~/.ssh/launchpad-ci_id_rsa
          chmod 600 ~/.ssh/launchpad-ci_id_rsa
          ssh-keyscan -t rsa git.launchpad.net >> ~/.ssh/known_hosts
      - name: Update changelog
        if: matrix.config.os == 'ubuntu-22.04'
        run: bash debian/update-changelog.sh
      - name: Prep launchpad
        if: matrix.config.os == 'ubuntu-22.04' && github.ref == 'refs/heads/main'
        env:
          GPG_KEY_ID: ${{ secrets.LAUNCHPAD_GPG_KEY_ID }}
        id: launchpadid
        run: |
          dpkg-buildpackage -k"$GPG_KEY_ID" -S -sa
          echo "CHANGES_NAME=$(ls ../*.changes | head -1 | xargs -n 1 basename)" >> $GITHUB_OUTPUT
      - name: Upload package to Launchpad PPA
        if: matrix.config.os == 'ubuntu-22.04' && github.ref == 'refs/heads/main'
        run: |
          dput ppa:coozoo/qtjsondiff ../${{ steps.launchpadid.outputs.CHANGES_NAME }}
      - name: build on linux
        if: matrix.config.os == 'ubuntu-22.04'
        id: buildlinux
        run: |
          # source /opt/qt*/bin/qt*-env.sh || true
          dpkg-buildpackage -us -uc
          cp ../*.deb ./
          echo "DEB_PACK_NAME=$(ls *.deb|head -1|xargs -n 1 basename)" >> $GITHUB_OUTPUT
          echo "VER_TAG_NAME=$(cat main.cpp |grep 'const QString APP'|awk -F\" '{print $2;}')-$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT
          echo "APP_NAME=$(cat *.pro |grep 'TARGET ='|awk -F\= '{print $2;}'| tr -d ' ')" >> $GITHUB_OUTPUT
          qmake6 CONFIG+=release PREFIX=/usr
          make -j$(nproc)
          # lrelease $(ls *.pro)
          LRELEASE_BIN=$(dpkg -L qt6-l10n-tools | grep '/lrelease$' | head -n1)
          "$LRELEASE_BIN"  $(ls *.pro)
          mkdir -p appdir/usr/bin
          ls -lR
          cp translations/*.qm appdir/usr/bin/
          cp ${{ steps.build.outputs.APP_NAME }} appdir/usr/bin/${{ steps.build.outputs.APP_NAME }}
          mkdir -p appdir/usr/share/icons/
          cp qtjsondiff.png appdir/usr/share/icons/
          mkdir -p appdir/usr/share/applications/
          cp *.desktop appdir/usr/share/applications/
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -appimage -qmake=$(command -v qmake6)
          ls -l
          cp ./Qt_JSON_diff*.AppImage ./Qt_JSON_diff-x86_64.AppImage
          ls -l
      - name: Upload Release Asset Linux AppImage
        if: matrix.config.os == 'ubuntu-22.04' && github.ref == 'refs/heads/main'
        id: upload-release-asset-linux-appimage
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./Qt_JSON_diff-x86_64.AppImage
          asset_name: Qt_JSON_diff-x86_64.AppImage
          asset_content_type: application/octet-stream
      - name: Upload deb to release
        if: matrix.config.os == 'ubuntu-22.04' && github.ref == 'refs/heads/main'
        id: upload-release-asset-linux-deb
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.buildlinux.outputs.DEB_PACK_NAME }}
          asset_name: ${{ steps.buildlinux.outputs.DEB_PACK_NAME }}
          asset_content_type: application/octet-stream
      - name: Archive code coverage results
        if: matrix.config.os == 'ubuntu-22.04' && github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: Qt_JSON_diff-x86_64.AppImage
          path: ./Qt_JSON_diff-x86_64.AppImage
          overwrite: true
      - name: get app version
        if: matrix.config.os == 'macos-latest'
        run: |
          echo "VER_TAG_NAME=$(cat main.cpp |grep 'const QString APP'|awk -F\" '{print $2;}')" >> $GITHUB_OUTPUT
          echo "APP_NAME=$(cat *.pro |grep 'TARGET ='|awk -F\= '{print $2;}'| tr -d ' ')" >> $GITHUB_OUTPUT
        id: buildosx
      - name: install qt OSX
        if: matrix.config.os == 'macos-latest'
        run: brew install qt
      - name: buid OSX
        if: matrix.config.os == 'macos-latest'
        run: |
          echo 'export PATH="$(brew --prefix qt)/bin:$PATH"' >> /Users/runner/.zshrc
          echo 'export PATH="/Users/runner/Library/Python/3.9/bin:$PATH"' >> ~/.zshrc
          chmod 777 MAC_build_RELEASE.sh
          ./MAC_build_RELEASE.sh
          ls -l
          ZIP_NAME="$(ls ${{ steps.buildosx.outputs.APP_NAME }}_*.zip | head -n1)"
          DMG_NAME="$(ls ${{ steps.buildosx.outputs.APP_NAME }}_*.dmg | head -n1)"
          echo "zip found: $ZIP_NAME"
          echo "dmg found: $DMG_NAME"
          echo "MAC_ZIP_NAME=$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "MAC_DMG_NAME=$DMG_NAME" >> $GITHUB_OUTPUT
        id: bundleosx
      - name: Upload Release Asset dmg
        if: matrix.config.os == 'macos-latest' && github.ref == 'refs/heads/main'
        id: upload-release-asset-dmg
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} 
          asset_path: ./${{ steps.bundleosx.outputs.MAC_DMG_NAME }}
          asset_name: ${{ steps.buildosx.outputs.APP_NAME }}_${{ steps.buildosx.outputs.VER_TAG_NAME }}.dmg
          asset_content_type: application/octet-stream
      - name: Upload Release Asset zip
        if: matrix.config.os == 'macos-latest' && github.ref == 'refs/heads/main'
        id: upload-release-asset-zip
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.bundleosx.outputs.MAC_ZIP_NAME }}
          asset_name: ${{ steps.buildosx.outputs.APP_NAME }}_${{ steps.buildosx.outputs.VER_TAG_NAME }}.zip
          asset_content_type: application/zip
      - name: Archive code coverage results
        if: matrix.config.os == 'macos-latest' && github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: ${{ steps.buildosx.outputs.APP_NAME }}_${{ steps.buildosx.outputs.VER_TAG_NAME }}.zip
          path: ./${{ steps.bundleosx.outputs.MAC_ZIP_NAME }}
          overwrite: true
      - name: Setup MSYS2 env
        if: matrix.config.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          # Variant of the environment to set by default: MSYS, MINGW32 or MINGW64
          msystem: MSYS
          # Default value for MSYS2_PATH_TYPE environment variable: strict, inherit or minimal
          #path-type: # optional, default is minimal
          # Retrieve and extract base installation from upstream GitHub Releases
          #release: # optional, default is true
          # Update MSYS2 installation through pacman
          #update: # optional
          # Install packages after installation through pacman
          install: >-
            mingw-w64-x86_64-toolchain
            base-devel
            git
            p7zip
            ruby
            mingw-w64-x86_64-qt6
            mingw-w64-x86_64-qt6-base
            mingw-w64-x86_64-qt6-tools
            mingw-w64-i686-toolchain
            mingw-w64-x86_64-qwt-qt6
            mingw-w64-x86_64-zlib
            mingw-w64-i686-zlib
            zlib-devel
            mingw-w64-x86_64-openssl
            mingw-w64-i686-openssl
            openssl-devel
            tar
      - name: get app version
        if: matrix.config.os == 'windows-latest'
        run: |
          echo "VER_TAG_NAME=$(cat main.cpp |grep 'const QString APP'|awk -F\" '{print $2;}')-$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT
          echo "APP_NAME=$(cat *.pro |grep 'TARGET ='|awk -F\= '{print $2;}'| tr -d ' ')" >> $GITHUB_OUTPUT          
        shell: msys2 {0}
        id: buildwin
      - name: make 64 win app
        if: matrix.config.os == 'windows-latest'
        run: |
          ls -l
          pwd
          set MSYSTEM=MINGW64
          ROOTMSYS=/d/a/_temp/msys64/mingw64
          export PATH=$ROOTMSYS/bin:$PATH
          ls -l $ROOTMSYS/bin | grep qmake || echo "qmake not found"
          $ROOTMSYS/bin/qmake-qt6 --version || echo "qmake failed to run"
          qmake-qt6
          make -j$(nproc)
          rm -f release/*.o; rm -f release/*.cpp; rm -f release/*.h
          windeployqt6.exe release/${{ steps.buildwin.outputs.APP_NAME }}.exe
          ls -l $ROOTMSYS/bin
          cp $ROOTMSYS/bin/zlib*.dll release/; cp $ROOTMSYS/bin/libgcc*.dll release/; cp $ROOTMSYS/bin/libwinpthread*.dll release/; cp $ROOTMSYS/bin/libstdc*.dll release/; cp $ROOTMSYS/bin/libdouble*.dll release/; cp $ROOTMSYS/bin/libicuin*.dll release/; cp $ROOTMSYS/bin/libicuuc*.dll release/; cp $ROOTMSYS/bin/libicudt*.dll release/; cp $ROOTMSYS/bin/libpcre*.dll release/; cp $ROOTMSYS/bin/libzstd*.dll release/; cp $ROOTMSYS/bin/libharfbuzz*.dll release/; cp $ROOTMSYS/bin/libgraphite*.dll release/; cp $ROOTMSYS/bin/libfreetype*.dll release/; cp $ROOTMSYS/bin/libbrotlidec*.dll release/; cp $ROOTMSYS/bin/libbrotlicommon*.dll release/; cp $ROOTMSYS/bin/libbz*.dll release/; cp $ROOTMSYS/bin/libpng*.dll release/; cp $ROOTMSYS/bin/libglib*.dll release/; cp $ROOTMSYS/bin/libintl*.dll release/; cp $ROOTMSYS/bin/libiconv*.dll release/; cp $ROOTMSYS/bin/libpcre*.dll release/; cp $ROOTMSYS/bin/libb*.dll release/; cp $ROOTMSYS/bin/libdouble-conversion.dll release/; cp $ROOTMSYS/bin/libgcc_s_seh*.dll release/
          cp $ROOTMSYS/bin/libcrypto*.dll release/; cp $ROOTMSYS/bin/libssl*.dll release/; cp $ROOTMSYS/bin/libmd4c.dll release/
          mv release ${{ steps.buildwin.outputs.APP_NAME }}_${{ steps.buildwin.outputs.VER_TAG_NAME }}_WIN64; 7z -tzip a ${{ steps.buildwin.outputs.APP_NAME }}_${{ steps.buildwin.outputs.VER_TAG_NAME }}_WIN64.zip ./${{ steps.buildwin.outputs.APP_NAME }}_${{ steps.buildwin.outputs.VER_TAG_NAME }}_WIN64/
          make clean
          ls -l
        shell: msys2 {0}
      - name: Upload Release Asset Win64
        if: matrix.config.os == 'windows-latest' && github.ref == 'refs/heads/main'
        id: upload-release-asset-win64
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.buildwin.outputs.APP_NAME }}_${{ steps.buildwin.outputs.VER_TAG_NAME }}_WIN64.zip
          asset_name: ${{ steps.buildwin.outputs.APP_NAME }}_${{ steps.buildwin.outputs.VER_TAG_NAME }}_WIN64.zip
          asset_content_type: application/zip
      - name: Archive code coverage results
        if: matrix.config.os == 'windows-latest' && github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v4.4.3
        with:
          name: ${{ steps.buildwin.outputs.APP_NAME }}_${{ steps.buildwin.outputs.VER_TAG_NAME }}_${{ github.ref_name }}_WIN64.zip
          path: ./${{ steps.buildwin.outputs.APP_NAME }}_${{ steps.buildwin.outputs.VER_TAG_NAME }}_WIN64.zip
          overwrite: true

